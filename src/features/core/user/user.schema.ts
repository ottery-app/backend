
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';
import { id, email, password, name, role, activationCode, ImageDto } from '@ottery/ottery-dto';
import { DataAble } from '../../data.make_interface/data.schema';
import { SignupAble } from '../event/event.schema';

export type UserDocument = User & Document;

@Schema()
export class User implements DataAble, SignupAble {
  /**
   * the id that is generated by mongo
   */
  _id: id; 

  /**
   * this is the profile picture of the user which is needed for pickup and dropoff
   */
  @Prop({required: false})
  pfp: ImageDto;

  /**
   * The users email; functionally their id (as of 10/15/22)
   */
  @Prop({required: true})
  email: email; //maybe make this the id?
  
  /**
   * The user's password
   */
  @Prop({required: true})
  password: password;

  /**
    * The user's first name
    */
  @Prop({required: true})
  firstName: name

  /**
   * The user's last name
   */
  @Prop({required:true})
  lastName: name

  /**
   * If the user's account is active. By default, the user's
   * account will be not activated (false) until they confirm their
   * account is legitimate via the activation code sent to
   * their email.
   */
  @Prop({required: true})
  activated: boolean;

  @Prop({required: true})
  roles: role[];

  /**
   * Their account activation code. Once this is used,
   * the activated boolean field will be set to true.
   */
  @Prop()
  activationCode: activationCode;

  @Prop()
  children: id[];

  @Prop()
  events: id[];

  @Prop()
  data: id;

  @Prop()
  socialLinks: id[];

  @Prop()
  chats: id[];
}

export const UserSchema = SchemaFactory.createForClass(User);
